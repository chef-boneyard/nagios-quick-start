# Service definitions
#
# Autogenerated by Chef.

define service {
    use                 default-service
    host_name           *
    service_description ping
    check_command       check_ping!200.0,20%!500.0,60%
}

# monitoring service checks
define service {
    service_description Nagios
    hostgroup_name      <%= node['nagios']['server_role'] %>
    check_command       check-nagios
    contact_groups      admins
    use                 default-service
}

# default checks for all hosts
# Uncomment if you're running chef-client as a daemon
#define service {
#    service_description Chef Client
#    hostgroup_name     base
#    check_command      check_chef_client
#    use                default-service
#}

define service {
    service_description Free Space All Disks
    hostgroup_name      linux
    check_command       check_all_disks
    use                 default-service
}

define service {
    service_description Load Average
    hostgroup_name      linux
    check_command       check_load
    use                 default-service
}

define service {
    service_description Free Memory
    hostgroup_name      linux
    check_command       check_mem
    use                 default-service
}

define service {
    service_description SSH
    hostgroup_name      linux
    check_command       check_ssh
    use                 default-service
}

define service {
    service_description Processes
    hostgroup_name      linux
    check_command       check_local_procs
    use                 default-service
}

<% unless @service_hosts['monitoring'].nil? -%>
# If the monitoring host is a postfix relay, uncomment this.
#define service {
#    service_description Postfix
#    hostgroup_name      monitoring
#    check_command       check_nrpe!check_smtp
#    use                 default-service
#}

<% end -%>
<% unless @service_hosts['webserver'].nil? -%>
# basic web server http check
define service {
    service_description HTTP Processes
    hostgroup_name      webserver
    check_command       check_http
    use                 default-service
}

<% end -%>
<% unless @service_hosts['database_master'].nil? -%>
# basic check if the database_master role is a mysql server
# database_master service checks
define service {
    service_description MySQL
    hostgroup_name      database_master
    check_command       check_nrpe!check_mysql_server
    use                 default-service
}

<% end -%>

# Services defined by data bags
<% @services.each do |service| -%>
  <% unless service['hostgroup_name'].nil? || !@hostgroups.include?(service['hostgroup_name']) -%>
define service {
  service_description <%= service['description'] || service['id'] %>
  hostgroup_name <%= service['hostgroup_name'] %>
  check_command check_<%= service['id'] %>
  use <% if service['service_template'].nil? -%>default-service<% else -%><%= service['service_template'] %> <% end -%>
  <% unless service['event_handler'].nil? -%>event_handler <%= service['event_handler'] %><% end -%>
  <% %w{check_interval retry_interval notification_interval}.each do |conf| %>
    <% unless service[conf].nil? %>
  <%= conf %> <%= nagios_interval(service[conf]) %>
    <% end %>
  <% end %>
  <% %w{passive_checks_enabled parallelize_check obsess_over_service check_freshness notifications_enabled event_handler_enabled flap_detection_enabled failure_prediction_enabled process_perf_data retain_status_information retain_nonstatus_information is_volatile check_period max_check_attempts check_interval retry_interval contact_groups notification_options notification_interval notification_period notes_url action_url}.each do |conf| %>
    <% unless service[conf].nil? %>
  <%= conf %> <%= service[conf] %>
    <% end %>
  <% end %>
}
<% if service['use_escalation'] %>define serviceescalation {
  # this should be an escalation defined in the nagios_serviceescalation data bag
  use <%= service['use_escalation'] %>
  service_description <%= service['id'] %>
  hostgroup_name <%= service['hostgroup_name'] %>
}
<% end %>
  <% end -%>
<% end -%>
